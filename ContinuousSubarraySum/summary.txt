Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:
Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
Note:
The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.


Initial thoughts:
This seems simple enough, just have two pointers starting at nums[0] and nums[1], keep track of your total subarray value, and if it's < goal, move the right pointer, if it's > goal, move left pointer. Also have to check that your points don't cross, that'd be if it's > goal && pointers close, increment BOTH of them. if the top pointer ever reaches the size of the array, no solution. Will try coding now

Later thoughts:
My early solution was straightforward and simple, but missed the 2nd point of the problem, if it sums to any multiple of k it works. So I failed the 2nd example. Should be able to modify my solution, but I now think this is far from optimal... probably a way to guerentee a solution based on array size with that extra conditional...
