Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Follow up:
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?

Example:

// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();

Initial Thoughts: 
The simple solution here seems fairly obvious, iterate the linked list to get the length, then select a random number based off that and go back through the list to get the desired index. But I bet there's a better way... let's see. The jist of what we want is to develop the random number as we iterate over the list, but for all we know the list is 100,000 units long and we need to make sure any spot only has a 1/100000 chance of being chosen. I'll think on this one over dinner.

I would be astounded to hear of a solution that didn't require a single pass of the list, it just seems too impractical. The real goal is to avoid 2 iterations  of the list. 

For that end, it seems that as you iterate over the list, you could have one answer, and then slowly decrease the chances of 'updating' that answer at each new node. Seems good in theory... but might break down. 

So to start, the first node is definitely the answer, as there may only be one node. 
Then we move on and view the second node. Here, we want to make it 50/50 between choosing the first node, and choosing the second node. Making a 50/50 choice of just updating our answer to the 2nd one gives those odds.
Now at the third node this might break down... let's see. If we again make it a 1/3 chance to update, then the chance of the first node being chosen is 1*(1/2)*(2/3) = (2/6) = 1/3... now it's looking good. The chance for it being the second node is (1/2)*(2/3) = 1/3, perfect! I can already kind of see how if the first node is correct, it cascades down to everything before the last node. 

But this needs a proof otherwise the solution is meaningless. A proof by induction seems appropriate. 

If selections 1,...,k each have a 1/k chance of being chosen, then if k+1 is given a 1/(k+1) chance of being chosen, everything in the selection has a 1/(k+1) chance of being selected.
Base Case: Shown above

Domino: selections 1,...,k have a 1/k chance of being chosen. Consider we now choose item k+1 with 1/(k+1) chance
selection 0<i<=k has a chance of being selected of (1/k)*(k/(k+1)) = 1/(k+1)

done.

Awesome, this theory works. And it'd let us complete the solution in one pass of the list. 
But we would need a random operation at each index, which means we're really running at ~2n... which makes it feel like counting the list and going through that many indices would actually be faster... as it would have 1.5n accesses to 'next' and 1 call to random. But this solution feels so much snazzier... so I'll go with it. 

